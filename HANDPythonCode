# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# HAND_UL.py
# Created on: 2019-04-02 09:47:12.00000
#   (generated by A. Adel)
# Description: This py reads DEM and stream shp. It generates a raster of Height Above Nearest Drainage (HAND),
#
# further developments such as (Only add the needed files to the MXD, Add a GUI to easiy select the necessary input files and parameters,
# --------------------------------------------------------------------------
# Import necessary modules
import arcpy, os
# ----------------------------Define Locations and adresses----------------------------------------------
# Define locations of project folders:

#Choose the project folder
import Tkinter, tkFileDialog
root = Tkinter.Tk()
PrjPath = tkFileDialog.askdirectory(parent=root,initialdir="/",title='Please select a directory')

#PrjPath = "D:/HAND_ArcPy_03"

Workspace = PrjPath + '\WorkspaceHAND'
DataPath = PrjPath + '\Data'
mxdPath = PrjPath + '\Mxd\M02.mxd'
OutPath = PrjPath + '\OutPut'
#HAND_UL_01 = Workspace + '\HAND_UL_01.gdb'

# To start the new run on an empty folder
# Check If Workspace folder is exist and delete it
if arcpy.Exists(Workspace):
    arcpy.Delete_management(Workspace)
# Create File GDB and manage Workspace, Define Local Workspace Env
arcpy.CreateFolder_management(PrjPath, "WorkspaceHAND")
#arcpy.CreateFileGDB_management(Workspace, "HAND_UL_01", "CURRENT")
arcpy.env.workspace = Workspace
arcpy.env.overwriteOutput = True

# Define MXD project and Data function
mxd = arcpy.mapping.MapDocument(mxdPath)
df = arcpy.mapping.ListDataFrames(mxd, "*")[0]

# Delete all previous layers in the MXD  [shorturl.at/imLQX]
for lyr in arcpy.mapping.ListLayers(mxd, "", df):
    arcpy.mapping.RemoveLayer(df, lyr)
# ---------------------------------Read input Files-----------------------------------------
#
# Find the list of all shapefiles in the data folder
arcpy.env.workspace = DataPath #shorturl.at/DLTV5
datasets = arcpy.ListDatasets()
datasets = [''] + datasets if datasets is not None else []

'''
# Add the SHp files to the MXD
for ds in datasets:  # shorturl.at/auvO2
    for fc in arcpy.ListFeatureClasses(feature_dataset=ds):
        path = os.path.join(arcpy.env.workspace, ds, fc)
        addLayer = arcpy.mapping.Layer(path)
        arcpy.mapping.AddLayer(df, addLayer)
'''
arcpy.env.workspace = Workspace
# ---------------------------------Processing-----------------------------------------
# identify dangling vertices of the NHD flowlines + CReate a point SHp file and Add it ti the MXD
FL_lyr = arcpy.mapping.Layer(DataPath + '\NHDFlowline.shp')
arcpy.FeatureVerticesToPoints_management(FL_lyr, 'DanglingVertices','DANGLE')  # get the ends of the streams flowlines
lyrpath = Workspace + '\DanglingVertices.shp' # Define the Path
addLayer = arcpy.mapping.Layer(lyrpath) # pich the layer
arcpy.mapping.AddLayer(df, addLayer)
# Add Input Data DEM Raster
arcpy.env.workspace = DataPath
FCD = arcpy.ListRasters()
DEM = arcpy.MakeRasterLayer_management(FCD[0], "Onion3")
layer = DEM.getOutput(0)
arcpy.mapping.AddLayer(df, layer, 'AUTO_ARRANGE')
arcpy.env.workspace = Workspace

# Convert point shp to raster------------------------------------------
arcpy.env.workspace = Workspace
    # Edit the Env (Output Coordinate System + Extent + Snap Raster + Cell Size)
    # Then convert

# Get Original DEM raster properties
RasterPath = DataPath + "\Onion.tif" # the coordinate system of the Onion raster is the used here as a source
                                      # To be changed in the general version of this project
                                      # Add loop to pivk Rastre from Data folder
sr = arcpy.CreateSpatialReference_management("", RasterPath) # copy of the Spatial Reference https://bit.ly/2DyfBBE
myExtent = arcpy.sa.Raster(RasterPath).extent #https://bit.ly/2PnpbvC
arcpy.env.extent = myExtent #arcpy.Extent(0,0,10,10)     #https://bit.ly/2KVTNG4

arcpy.env.snapRaster = RasterPath
CellSize = arcpy.GetRasterProperties_management(RasterPath, "CELLSIZEX")
# Convert
arcpy.FeatureToRaster_conversion("DanglingVertices.shp", "StartFlag", "Start_",10)
# Add to the Mxd
start = arcpy.MakeRasterLayer_management("Start_", "Start")
strto = start.getOutput(0)
arcpy.mapping.AddLayer(df, strto, 'AUTO_ARRANGE')
arcpy.ResetEnvironments()   ######

#Reclassify Start Raster lyr        https://bit.ly/2GtIKyp
# Reclassify (in_raster, reclass_field, remap, {missing_values})

Startrc = arcpy.sa.Reclassify("D:\HAND_ArcPy_03\WorkspaceHAND\Start_", "Value", arcpy.sa.RemapValue([[0,0],[1,1],["NODATA",0]]))
rc = Workspace + '\Startrc'
Startrc.save(rc)#"D:\HAND_ArcPy_03\Workspace\Startrc")
rdo = arcpy.MakeRasterLayer_management(rc, "Startrc")
rco = rdo.getOutput(0)
arcpy.mapping.AddLayer(df, rco, 'AUTO_ARRANGE')

# 2. DEM derived stream network and Height Above the Nearest Drainage (HAND)
# Local variables:define the layers
Onion_tif = DataPath + '\Onion.tif'
Onion3fel = Workspace + '\Onion3fel'
Onion3d8 = Workspace + '\Onion3d8'  # Flow Direction Layer
FlAcc = Workspace + '\Onion3ad8w'   # Flow Accumulation Layer
Onion3str = Workspace + '\Onion3str'
Onion3dinf = Workspace + '\Onion3dinf'
Onion3pslp = Workspace + '\Onion3pslp'
Onion3hand = Workspace + '\Onion3hand'
SympoLayer = DataPath + '\HANDclasses.lyr'  # Symboloize Layer
Onion3lnk = Workspace + '\Onion3lnk'
Onion3catch = Workspace + '\Onion3catch.tif'
drainageline = Workspace + '\drainageline.shp'
Catchpoly = Workspace + '\Catchpoly.shp'

    ### Calculations  ###
arcpy.env.workspace = Workspace
tempEnvironment0 = arcpy.env.parallelProcessingFactor
arcpy.env.parallelProcessingFactor = "0"
    ###  Fill
outFill  = arcpy.sa.Fill(Onion_tif)
outFill.save(Onion3fel)
    #Flow Direction with D8 Option
outFlowDirection  = arcpy.sa.FlowDirection(Onion3fel,"", "", 'D8')
outFlowDirection.save(Onion3d8)
    #Flow Accumulation with Startrc as weight raster
outFlowAccumulation = arcpy.sa.FlowAccumulation(Onion3d8, Startrc, 'INTEGER', 'D8')
outFlowAccumulation.save(FlAcc)
   #Create stream raster        OutRas = Con(InRas1, 40, 30, "Value >= 2")
outstreamraster = arcpy.sa.Con(FlAcc, 1, 0)
outstreamraster.save (Onion3str)
    # Flow direction with the DINF option
outFlowDirection2 = arcpy.sa.FlowDirection(Onion3fel,"", "Onion3pslp", 'DINF')
outFlowDirection2.save(Onion3dinf)
    # Flow distance with the DINF flow direction and vertical distance
outFlowDistance  = arcpy.sa.FlowDistance(Onion3str, Onion3fel, Onion3dinf, 'VERTICAL', 'DINF')
outFlowDistance.save(Onion3hand)
    # Stream link
outStreamlink  = arcpy.sa.StreamLink(Onion3str, Onion3d8)
outStreamlink.save(Onion3lnk)
    # Watershed     # outWatershed = Watershed(inFlowDirection, inPourPointData, inPourPointField)
outWatershed  = arcpy.sa.Watershed(Onion3d8, Onion3lnk, "VALUE")
outWatershed.save(Onion3catch)
    # Stream to Feature
arcpy.sa.StreamToFeature(Onion3lnk, Onion3d8, drainageline,"NO_SIMPLIFY")
    # Calculate the catchment polygon layer using Raster to Polygon
arcpy.RasterToPolygon_conversion(Onion3catch, Catchpoly, "NO_SIMPLIFY", "VALUE", "MULTIPLE_OUTER_PART", "")
                            ##########################
arcpy.env.parallelProcessingFactor = tempEnvironment0
                            ##########################
arcpy.env.workspace = Workspace     ##########################
    ### Add the new Layers to the Mxd ###
'''
addLayer = arcpy.mapping.Layer(Onion3fel)
arcpy.mapping.AddLayer(df, addLayer, "AUTO_ARRANGE")
addLayer = arcpy.mapping.Layer(Onion3d8)
arcpy.mapping.AddLayer(df, addLayer, "AUTO_ARRANGE")
addLayer = arcpy.mapping.Layer(FlAcc)
arcpy.mapping.AddLayer(df, addLayer, "AUTO_ARRANGE")
addLayer = arcpy.mapping.Layer(Onion3str)
arcpy.mapping.AddLayer(df, addLayer, "AUTO_ARRANGE")
addLayer = arcpy.mapping.Layer(Onion3dinf)
arcpy.mapping.AddLayer(df, addLayer, "AUTO_ARRANGE")
addLayer = arcpy.mapping.Layer(Onion3hand)
arcpy.mapping.AddLayer(df, addLayer, "AUTO_ARRANGE")
addLayer = arcpy.mapping.Layer(Onion3lnk)
arcpy.mapping.AddLayer(df, addLayer, "AUTO_ARRANGE")
addLayer = arcpy.mapping.Layer(Onion3catch)
arcpy.mapping.AddLayer(df, addLayer, "AUTO_ARRANGE")
addLayer = arcpy.mapping.Layer(drainageline)
arcpy.mapping.AddLayer(df, addLayer, "AUTO_ARRANGE")
addLayer = arcpy.mapping.Layer(Catchpoly)
arcpy.mapping.AddLayer(df, addLayer, "AUTO_ARRANGE")
'''
addLayer = arcpy.mapping.Layer(Onion3hand)
arcpy.mapping.AddLayer(df, addLayer, "AUTO_ARRANGE")

# turn off the layers
        # https://gis.stackexchange.com/questions/73433/turning-off-layers-in-arcmap-via-arcpy
layers = arcpy.mapping.ListLayers(mxd)
for layer in layers:
    layer.visible = False
mxd.save()
arcpy.Delete_management("in_memory")
arcpy.ClearWorkspaceCache_management()
del mxd # to free the PC memory from locking the mxd
